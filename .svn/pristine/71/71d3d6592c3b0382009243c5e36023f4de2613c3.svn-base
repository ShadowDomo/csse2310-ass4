#ifndef NETWORKING_H
#define NETWORKING_H

#include <netdb.h>
#include <string.h>
#include <stdio.h>
#include <unistd.h>
#include <pthread.h>
#include <stdlib.h>
#include <semaphore.h>
#include <stdbool.h>

#define PORT_MAX_CHARS 6 // incl '\0'

/** Error codes for Roc. **/
typedef enum RocErrorCodes {
    NORMAL_END = 0,
    ROC_INCORRECT_NUM_ARGS = 1,
    ROC_INVALID_MAPPER_PORT = 2,
    ROC_MAPPER_REQUIRED = 3,
    ROC_MAPPER_CONNECTION_ERROR = 4,
    ROC_NO_MAP_ENTRY = 5,
    ROC_FAILED_TO_CONNECT = 6
} RocErrorCodes;

/** Error codes for Roc. **/
typedef enum ControlErrorCodes {
    CTRL_INCORRECT_NUM_ARGS = 1,
    CTRL_INVALID_CHARS = 2,
    CTRL_INVALID_PORT = 3,
    CTRL_MAP_CONNECTION_ERROR = 4,
} ControlErrorCodes;

/** Representation of an Airport. **/
typedef volatile struct Airport {
    // Airport ID
    char* id;

    // Airport info
    char* info;

    // port which Airport is on
    int port;
} Airport;

typedef volatile struct Plane {
    // plane info
    char* info;

    // plane id
    char* id;
} Plane;

/** State of the entire thing. **/
typedef volatile struct WorldState {
    // List of known airports
    Airport** airports;

    // number of airports
    int countAirports;

} WorldState;

typedef volatile struct ControlState {
    // planes which controller has seen
    Plane** planes;

    // number of planes which controller has seen
    int countPlanes;

    // mapper port given in arg
    int mapperPort;

    // airport ID
    char* airportId;

    // airport info
    char* airportInfo;
} ControlState;


volatile struct Param {
    int* value;
    WorldState* worldState;
    pthread_t tid;
    sem_t* guard;
};

volatile  struct ControlParam {
    int* value;
    ControlState* controlState;
    pthread_t tid;
    sem_t* guard;
};

void control_exit(ControlErrorCodes errorCode);
void roc_exit(RocErrorCodes errorCode);
int make_socket(WorldState* worldState, ControlState* controlState);
int outbound_socket_maker(int mapperPort);
void allocate_airports(WorldState* worldState);

#endif