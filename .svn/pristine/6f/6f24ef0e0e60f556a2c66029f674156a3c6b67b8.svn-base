#include "mapper.h"



/** Entry point to Roc program **/
int main(int argc, char** argv) {
    // get planeID
    char* planeID = argv[1];

    // get mapper port - either number or a dash
    char* mapperPort = argv[2];

    // has_port is true if a mapper port was inputted
    bool has_port = true;
    int mapperPortNum;
    if (strcmp(mapperPort, "-") == 0) {
        has_port = false;
    } else {
        mapperPortNum = (int) strtol(mapperPort, (char**){0}, 10);
    }

    // initialize state
    WorldState* worldState = malloc(sizeof(WorldState));
    worldState->countAirports = 0;

    // find destinations
    for (int i = 3; i < argc; ++i) {
        allocate_airports(worldState);
        worldState->countAirports++;
        // rest holds the string unconverted part of conversion
        char* rest;
        int result = (int) strtol(argv[i], &rest, 10);
        // note we use i - 3 because destinations start from arg 3
        Airport* airport = worldState->airports[i - 3];
        airport->id = malloc(sizeof(char) * 80);
        strncpy(airport->id, "", 2);
        // if was int
        if (result != 0 && strlen(rest) == 0) {
            airport->port = result;
        } else {
            strncpy(airport->id, argv[i], 80);
            // use port 0 to indicate no port was given
            airport->port = 0;
        }
    }

    // connect to mapper and make streams
    if (has_port) {
        int server = outbound_socket_maker(mapperPortNum);
        // write to server
        int server2 = dup(server);
        FILE* writer = fdopen(server, "w");
        FILE* reader = fdopen(server2, "r");

        for (int i = 0; i < worldState->countAirports; ++i) {
            Airport *airport = worldState->airports[i];
            // was given an id
            if (airport->port == 0) {
                char message[100];
                snprintf(message, 100, "?%s\n", airport->id);

                fprintf(writer, "%s", message);
                fflush(writer);

                // recieve server response
                char input[80];
                if (fgets(input, 80, reader) != NULL) {
                    int port = (int) strtol(input, (char **) {0}, 10);
                    airport->port = port;
                }

                fclose(writer);
            }
        }
    }

    // connect to each destination and get info
    for (int i = 0; i < worldState->countAirports; ++i) {
        Airport* airport = worldState->airports[i];
        int server = outbound_socket_maker(airport->port);
        // write to server
        int server2 = dup(server);
        FILE* writer = fdopen(server, "w");
        FILE* reader = fdopen(server2, "r");

        // write roc id
        fprintf(writer, "%s\n", planeID);
        fflush(writer);
        // get control id
        char input[80];
        if (fgets(input, 80, reader) != NULL) {
            airport->info = malloc(sizeof(char) * 80);
            strncpy(airport->info, input, 80);
        }
    }

    // print log
    for (int i = 0; i < worldState->countAirports; ++i) {
        Airport* airport = worldState->airports[i];
        printf("%s\n", airport->info);
    }
    fflush(stdout);

    return 0;
}